FROM node:20-alpine AS builder

# Set NODE_ENV for build stage
ENV NODE_ENV=production

WORKDIR /app

# Copy package files first to leverage cache
COPY package*.json ./

# Install ALL dependencies (including dev) for build stage
RUN npm ci \
    && npm cache clean --force \
    && rm -rf /root/.npm/_cacache

# Copy source files
COPY . .

# Build the application and clean up
RUN npm run build \
    && rm -rf node_modules \
    && rm -rf /root/.npm

# Production stage - use smaller nginx image
FROM nginx:alpine-slim

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Add runtime configuration script
COPY docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"] 