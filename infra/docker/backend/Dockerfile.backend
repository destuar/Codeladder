# Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci && \
    npm cache clean --force

# Copy source code
COPY tsconfig.json ./
COPY prisma/ ./prisma/
COPY src/ ./src/

# Debug: List contents before build
RUN echo "Contents of /app:" && \
    ls -la /app && \
    echo "Contents of /app/src:" && \
    ls -la /app/src

# Generate Prisma client first
RUN npx prisma generate

# Build TypeScript code
RUN npm run build || { \
        echo "Build failed. Check the logs above for errors."; \
        ls -la /app/dist || true; \
        exit 1; \
    }

# Debug: List contents after build
RUN echo "Contents of /app/dist:" && \
    ls -la /app/dist

# Production stage
FROM node:20-alpine

# Create non-root user
RUN addgroup -S nodejs && \
    adduser -S nodejs -G nodejs

# Set working directory
WORKDIR /app

# Install production dependencies
RUN apk add --no-cache \
    postgresql-client \
    openssl \
    curl

# Copy package files
COPY package*.json ./

# Install production dependencies
RUN npm ci --production && \
    npm cache clean --force

# Copy built files and configurations
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nodejs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

# Debug: List contents in production stage
RUN echo "Contents of /app in production stage:" && \
    ls -la /app && \
    echo "Contents of /app/dist in production stage:" && \
    ls -la /app/dist

# Generate Prisma client for production
RUN npx prisma generate

# Switch to non-root user
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Expose API port
EXPOSE 8000

# Start the application
CMD ["node", "dist/server.js"] 