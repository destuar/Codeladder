# =============================================================================
# CodeLadder Production Docker Compose Configuration
# 
# This file defines the production environment services:
# - Backend: Node.js/Express API server (optimized build)
# - Frontend: Nginx serving static files (optimized build)
# 
# Features:
# - Production-optimized builds
# - Health checks for container orchestration
# - Automatic service restart
# - Shared network for service communication
# =============================================================================

version: '3.8'

services:
  # ============================= BACKEND SERVICE ==============================
  backend:
    build:
      # Build context is the backend root directory
      context: ../../
      # Use production Dockerfile
      dockerfile: ./backend/Dockerfile.backend
    env_file:
      # Load production environment variables
      - ../../.env  # Reference root .env file
    environment:
      # Force production mode
      - NODE_ENV=production
    ports:
      # Expose API port
      - "8000:8000"
    healthcheck:
      # Regular health checks for container orchestration
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      # Connect to shared network for inter-service communication
      - app-network
    # Automatically restart on failure
    restart: always

  # ============================= FRONTEND SERVICE ============================
  frontend:
    build:
      # Build context is the frontend root directory
      context: ./frontend
      # Use production Dockerfile
      dockerfile: Dockerfile.frontend
    env_file:
      # Load production environment variables
      - ../../.env  # Reference root .env file
    environment:
      # Production-specific environment variables
      - VITE_NODE_ENV=production
    ports:
      # Expose frontend port
      - "80:80"
      - "443:443"
    depends_on:
      # Ensure backend is available
      - backend
    networks:
      # Connect to shared network for inter-service communication
      - app-network
    # Automatically restart on failure
    restart: always

# ============================= NETWORKS ====================================
networks:
  # Shared network for service communication
  app-network:
    # Use bridge driver for container communication
    driver: bridge 
