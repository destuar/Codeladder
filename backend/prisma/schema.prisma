generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  tokenVersion  Int       @default(0)
  
  // Profile fields
  avatar        String?
  bio           String?   @db.Text
  location      String?
  website       String?
  phoneNumber   String?
  dateOfBirth   DateTime?
  
  // Learning progress
  completedProblems Problem[]  @relation("UserCompletedProblems")
  progress     Progress[]
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("users")
}

model Level {
  id          String    @id @default(cuid())
  name        String    // e.g., "I", "L3", "L4"
  order       Int       // For sorting levels
  description String?   @db.Text
  topics      Topic[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("levels")
}

model Topic {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  content     String?   @db.Text
  order       Int       // For sorting topics within a level
  level       Level     @relation(fields: [levelId], references: [id])
  levelId     String
  problems    Problem[]
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("topics")
}

enum ProblemType {
  INFO
  CODING
  STANDALONE_INFO
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  problems    ProblemToCollection[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("collections")
}

model Problem {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  difficulty  Difficulty
  required    Boolean   @default(false)
  reqOrder    Int?      // Order number for required problems
  content     String?   @db.Text  // Problem content/description
  solution    String?   @db.Text  // Solution or hints
  problemType ProblemType @default(INFO)  // Type of problem (Info, Coding, or Standalone Info)
  codeTemplate String?   @db.Text  // Starting code template for coding problems
  testCases   Json?     // Test cases for coding problems
  estimatedTime Int?    // Estimated time to complete the problem (in minutes)
  topic       Topic?    @relation(fields: [topicId], references: [id])  // Make topic optional for standalone info
  topicId     String?   // Make topicId optional for standalone info
  completedBy User[]    @relation("UserCompletedProblems")
  progress    Progress[]
  collections ProblemToCollection[] // Relation to collections
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("problems")
}

model ProblemToCollection {
  problem     Problem    @relation(fields: [problemId], references: [id])
  problemId   String
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@id([problemId, collectionId])
  @@map("problem_collections")
}

model Progress {
  id                String         @id @default(cuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  topic             Topic          @relation(fields: [topicId], references: [id])
  topicId           String
  problem           Problem?       @relation(fields: [problemId], references: [id])
  problemId         String?
  status            ProgressStatus @default(NOT_STARTED)
  
  // New fields for spaced repetition
  reviewScheduledAt DateTime?      // When this problem is scheduled to be reviewed next
  reviewLevel       Int?           // Current review level (determines intervals)
  lastReviewedAt    DateTime?      // When the problem was last reviewed
  reviewHistory     Json?          // JSON array of past review sessions with dates and success
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([userId, topicId, problemId])
  @@map("progress")
}

model StandaloneInfoPage {
  id          String    @id @default(cuid())
  name        String
  content     String    @db.Text
  description String?   @db.Text
  estimatedTime Int?    // Estimated time to complete (in minutes)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("standalone_info_pages")
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

enum Difficulty {
  EASY_IIII
  EASY_III
  EASY_II
  EASY_I
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
} 