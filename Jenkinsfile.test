pipeline {
    agent {
        label 'codeladder'
    }

    options {
        timeout(time: 5, unit: 'MINUTES')
        disableConcurrentBuilds()
        quietPeriod(0)
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        EC2_HOST = '3.21.246.147'
        FRONTEND_PORT = '8085'
        BACKEND_PORT = '8000'
        NODE_ENV = 'test'
        API_URL = "http://${EC2_HOST}:${BACKEND_PORT}/api"
    }

    stages {
        stage('Setup Git') {
            steps {
                withCredentials([sshUserPrivateKey(
                    credentialsId: 'jenkins-ssh-key',
                    keyFileVariable: 'SSH_KEY'
                )]) {
                    sh '''
                        # Setup SSH directory
                        mkdir -p ~/.ssh
                        chmod 700 ~/.ssh
                        
                        # Add GitHub keys
                        ssh-keyscan -t rsa,dsa,ecdsa,ed25519 github.com > ~/.ssh/known_hosts
                        chmod 644 ~/.ssh/known_hosts
                        
                        # Configure Git SSH
                        git config --global core.sshCommand "ssh -i '$SSH_KEY' -o StrictHostKeyChecking=no"
                        
                        # Clean workspace
                        rm -rf .* * || true
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                withCredentials([sshUserPrivateKey(
                    credentialsId: 'jenkins-ssh-key',
                    keyFileVariable: 'SSH_KEY'
                )]) {
                    sh '''
                        git clone git@github.com:cee8/codeladder.git .
                        git checkout ${BRANCH_NAME:-main}
                        
                        # Debug info
                        echo "Current branch: $(git branch --show-current)"
                        git status
                    '''
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'DATABASE_URL', variable: 'DATABASE_URL'),
                        string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET'),
                        string(credentialsId: 'JWT_REFRESH_SECRET', variable: 'JWT_REFRESH_SECRET'),
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        sh """
                            cat > backend/.env.test << EOL
NODE_ENV=test
PORT=${BACKEND_PORT}
DATABASE_URL=${DATABASE_URL}
JWT_SECRET=${JWT_SECRET}
JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
JWT_EXPIRES_IN=15m
CORS_ORIGIN=http://localhost:${FRONTEND_PORT}
AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
AWS_REGION=us-east-2
S3_BUCKET=codeladder-s3
EOL
                        """
                    }
                }
            }
        }

        stage('Test Backend') {
            steps {
                dir('backend') {
                    sh '''
                        echo "Installing dependencies..."
                        npm install
                        
                        echo "Running tests..."
                        npm test || exit 1
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo "Tests failed on branch ${env.BRANCH_NAME ?: 'main'}"
        }
        success {
            echo "All tests passed on branch ${env.BRANCH_NAME ?: 'main'}"
        }
    }
} 