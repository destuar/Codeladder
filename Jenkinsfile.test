pipeline {
    agent any
    
    stages {
        stage('Test Backend') {
            steps {
                dir('backend') {
                    script {
                        // Setup test environment
                        sh '''
                            echo "🔄 Setting up test environment..."
                            npm install
                            npm install --save-dev jest @types/jest ts-jest supertest @types/supertest
                        '''

                        // Update package.json
                        sh '''
                            node -e '
                                const fs = require("fs");
                                const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
                                pkg.scripts = pkg.scripts || {};
                                pkg.scripts.test = "jest --silent";
                                fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
                            '
                        '''

                        // Create test config files
                        sh '''
                            echo '{
                                "compilerOptions": {
                                    "target": "es6",
                                    "module": "commonjs",
                                    "types": ["jest", "node"],
                                    "esModuleInterop": true,
                                    "skipLibCheck": true,
                                    "forceConsistentCasingInFileNames": true
                                },
                                "include": ["src/**/*", "__tests__/**/*"],
                                "exclude": ["node_modules"]
                            }' > tsconfig.json

                            echo 'module.exports = {
                                preset: "ts-jest",
                                testEnvironment: "node",
                                testTimeout: 10000,
                                verbose: false,
                                silent: true,
                                collectCoverage: true
                            }' > jest.config.js
                        '''

                        // Create and run tests
                        def testOutput = sh(
                            script: '''
                                mkdir -p __tests__
                                echo 'import { describe, expect, test } from "@jest/globals";
                                describe("Health Check", () => {
                                    test("Server is running", () => {
                                        expect(true).toBe(true);
                                    });
                                });' > __tests__/health.test.ts
                                
                                npm test 2>&1
                            ''',
                            returnStdout: true
                        ).trim()

                        // Process and display results
                        def suites = sh(script: "echo '${testOutput}' | grep 'Test Suites:' | tr -d '\\r'", returnStdout: true).trim()
                        def tests = sh(script: "echo '${testOutput}' | grep '^Tests:' | tr -d '\\r'", returnStdout: true).trim()
                        def time = sh(script: "echo '${testOutput}' | grep '^Time:' | tr -d '\\r'", returnStdout: true).trim()
                        def passed = testOutput.contains('PASS')

                        echo """╔═══════════════════════════════════════════════════════════════════════════╗
║                           TEST EXECUTION SUMMARY                           ║
╠═══════════════════════════════════════════════════════════════════════════╣
║ ${passed ? '✅ Tests Passed' : '❌ Tests Failed'}                                                         ║
║                                                                           ║
║ ${suites.padRight(75)} ║
║ ${tests.padRight(75)} ║
║ ${time.padRight(75)} ║
╚═══════════════════════════════════════════════════════════════════════════╝"""

                        if (!passed) {
                            error "Tests failed!"
                        }
                    }
                }
            }
        }
    }
}