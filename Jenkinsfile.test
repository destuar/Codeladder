pipeline {
    agent any

    environment {
        EC2_HOST = '3.21.246.147'
        FRONTEND_PORT = '8085'
        BACKEND_PORT = '8000'
        NODE_VERSION = '18'
        NODE_ENV = 'test'
        API_URL = "http://${EC2_HOST}:${BACKEND_PORT}/api"
    }

    stages {
        stage('Setup Node.js') {
            steps {
                sh """
                    . ~/.nvm/nvm.sh
                    nvm install ${NODE_VERSION}
                    nvm use ${NODE_VERSION}
                    node --version
                    npm --version
                """
            }
        }

        stage('Backend Type Check') {
            steps {
                dir('backend') {
                    sh """
                        # Install dependencies
                        npm ci

                        # Run type checking
                        npm run type-check || npm run build
                    """
                }
            }
        }

        stage('Backend Security Scan') {
            steps {
                dir('backend') {
                    sh """
                        # Install dependencies including dev dependencies
                        npm ci
                        
                        # Run npm audit
                        npm audit
                        
                        # Run snyk if available (requires setup)
                        which snyk && snyk test || echo "Snyk not installed, skipping"
                    """
                }
            }
        }

        stage('Frontend Tests') {
            steps {
                dir('frontend') {
                    sh """
                        # Install dependencies
                        npm ci

                        # Run type checking
                        npm run type-check

                        # Run linting
                        npm run lint

                        # Test build
                        VITE_API_URL=${API_URL} npm run build
                    """
                }
            }
        }

        stage('Frontend Security & Performance') {
            steps {
                dir('frontend') {
                    sh """
                        # Install dependencies
                        npm ci
                        
                        # Run security audit
                        npm audit
                        
                        # Run lighthouse CI (requires setup)
                        which lighthouse && lighthouse http://localhost:8085 --output json || echo "Lighthouse not installed, skipping"
                    """
                }
            }
        }

        stage('Docker Build Tests') {
            steps {
                parallel(
                    backend: {
                        dir('backend') {
                            sh 'docker build -t codeladder-backend:test -f Dockerfile.backend .'
                        }
                    },
                    frontend: {
                        dir('frontend') {
                            sh 'docker build -t codeladder-frontend:test -f Dockerfile.frontend .'
                        }
                    }
                )
            }
        }

        stage('Config Validation') {
            steps {
                dir('backend') {
                    sh """
                        # Test environment schema
                        node -e '
                            const { z } = require("zod");
                            const schema = require("./src/config/env.ts").envSchema;
                            try {
                                schema.parse(process.env);
                                console.log("Environment configuration is valid");
                            } catch (error) {
                                console.error("Environment validation failed:", error.errors);
                                process.exit(1);
                            }
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend(
                color: 'good',
                message: "Branch Tests Passed: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}"
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: "Branch Tests Failed: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nCheck the logs: ${env.BUILD_URL}"
            )
        }
    }
} 