stage('Test Backend') {
    steps {
        dir('backend') {
            sh '''
                echo "🔄 Setting up test environment..."
                npm install
                
                # Install test dependencies
                npm install --save-dev jest @types/jest ts-jest supertest @types/supertest
                
                # Create test configuration
                echo '{
                    "preset": "ts-jest",
                    "testEnvironment": "node",
                    "testTimeout": 10000,
                    "verbose": false,
                    "silent": true,
                    "collectCoverage": true,
                    "coverageThreshold": {
                        "global": {
                            "branches": 70,
                            "functions": 70,
                            "lines": 70
                        }
                    }
                }' > jest.config.json

                # Create test directory and basic tests
                mkdir -p __tests__
                
                # Create basic health check test
                echo 'describe("Health Check", () => {
                    test("Server is running", () => {
                        expect(true).toBe(true);
                    });
                });' > __tests__/health.test.ts

                # Run tests and capture output
                echo "🧪 Running tests..."
                TEST_OUTPUT=$(npm test 2>&1) || true
                
                # Generate summary report
                echo "
╔═══════════════════════════════════════════════════════════════════════════╗
║                           TEST EXECUTION SUMMARY                           ║
╠═══════════════════════════════════════════════════════════════════════════╣"

                if echo "$TEST_OUTPUT" | grep -q "PASS"; then
                    echo "║ ✅ All Tests Passed                                                     ║"
                    RESULT="PASS"
                else
                    echo "║ ❌ Some Tests Failed                                                    ║"
                    RESULT="FAIL"
                fi

                echo "║                                                                           ║"
                echo "║ Test Suites:                                                             ║"
                echo "$TEST_OUTPUT" | grep "Test Suites:" | while read -r line; do
                    printf "║  %s%-65s║\\n" "  " "$line"
                done

                echo "║                                                                           ║"
                echo "║ Tests:                                                                    ║"
                echo "$TEST_OUTPUT" | grep "Tests:" | while read -r line; do
                    printf "║  %s%-65s║\\n" "  " "$line"
                done

                echo "║                                                                           ║"
                echo "║ Coverage:                                                                 ║"
                echo "$TEST_OUTPUT" | grep "All files" | while read -r line; do
                    printf "║  %s%-65s║\\n" "  " "$line"
                done
                
                echo "╚═══════════════════════════════════════════════════════════════════════════╝"

                if [ "$RESULT" = "FAIL" ]; then
                    exit 1
                fi
            '''
        }
    }
}

