pipeline {
    agent any

    environment {
        EC2_HOST = '3.21.246.147'
        FRONTEND_PORT = '8085'
        BACKEND_PORT = '8000'
        NODE_VERSION = '18.20.7'
        NODE_ENV = 'test'
        API_URL = "http://${EC2_HOST}:${BACKEND_PORT}/api"
    }

    stages {
        stage('Setup Node.js') {
            steps {
                sh '''
                    # Install nvm if not present
                    if [ ! -d "$HOME/.nvm" ]; then
                        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                    fi
                    
                    # Source nvm
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                    
                    # Install and use Node.js
                    nvm install ${NODE_VERSION}
                    nvm use ${NODE_VERSION}
                    node --version
                    npm --version
                '''
            }
        }

        stage('Backend Type Check') {
            steps {
                dir('backend') {
                    sh '''
                        export NVM_DIR="$HOME/.nvm"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm use ${NODE_VERSION}
                        
                        npm ci
                        npm run type-check || npm run build
                    '''
                }
            }
        }

        stage('Backend Security Scan') {
            steps {
                dir('backend') {
                    sh """
                        export NVM_DIR="/home/ec2-user/.nvm"
                        [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                        nvm use ${NODE_VERSION}
                        
                        # Run security audit
                        npm audit
                        
                        # Check for known vulnerabilities in dependencies
                        npm audit fix --dry-run --audit-level=high || true
                    """
                }
            }
        }

        stage('Frontend Tests') {
            steps {
                dir('frontend') {
                    sh '''
                        export NVM_DIR="$HOME/.nvm"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm use ${NODE_VERSION}
                        
                        npm ci
                        npm run type-check
                        npm run lint
                        VITE_API_URL=${API_URL} npm run build
                    '''
                }
            }
        }

        stage('Docker Build Tests') {
            steps {
                parallel(
                    backend: {
                        dir('backend') {
                            sh 'docker build -t codeladder-backend:test -f Dockerfile.backend .'
                        }
                    },
                    frontend: {
                        dir('frontend') {
                            sh 'docker build -t codeladder-frontend:test -f Dockerfile.frontend .'
                        }
                    }
                )
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend(
                color: 'good',
                message: "Branch Tests Passed: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}"
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: "Branch Tests Failed: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nCheck the logs: ${env.BUILD_URL}"
            )
        }
    }
} 