pipeline {
    agent any

    options {
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    environment {
        EC2_HOST = '3.21.246.147'
        FRONTEND_PORT = '8085'
        BACKEND_PORT = '8000'
        NODE_VERSION = '18.20.7'
        NODE_ENV = 'test'
        API_URL = "http://${EC2_HOST}:${BACKEND_PORT}/api"
    }

    stages {
        stage('Setup Node.js') {
            steps {
                script {
                    try {
                        sh '''
                            export NVM_DIR="$HOME/.nvm"
                            . "$NVM_DIR/nvm.sh" > /dev/null 2>&1
                            echo "Setting up Node.js environment..."
                            nvm install ${NODE_VERSION} > /dev/null 2>&1
                            nvm use ${NODE_VERSION} > /dev/null 2>&1
                            node --version
                            echo "✓ Node.js ${NODE_VERSION} ready"
                        '''
                    } catch (Exception e) {
                        error "Failed to setup Node.js: ${e.message}"
                    }
                }
            }
        }

        stage('Frontend Build') {
            steps {
                script {
                    try {
                        dir('frontend') {
                            sh '''
                                export NVM_DIR="$HOME/.nvm"
                                . "$NVM_DIR/nvm.sh"
                                nvm use ${NODE_VERSION}
                                
                                echo "Installing frontend dependencies..."
                                npm install --verbose
                                echo "✓ Dependencies installed"
                                
                                echo "Building frontend..."
                                npm run build || exit 1
                                echo "✓ Frontend build completed"
                            '''
                        }
                    } catch (Exception e) {
                        error "Frontend build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Backend Build') {
            steps {
                script {
                    try {
                        dir('backend') {
                            sh '''
                                export NVM_DIR="$HOME/.nvm"
                                . "$NVM_DIR/nvm.sh"
                                nvm use ${NODE_VERSION}
                                
                                echo "Installing backend dependencies..."
                                npm install --verbose
                                echo "✓ Dependencies installed"
                                
                                echo "Building backend..."
                                npm run build || exit 1
                                echo "✓ Backend build completed"
                            '''
                        }
                    } catch (Exception e) {
                        error "Backend build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Backend Security Scan') {
            steps {
                dir('backend') {
                    sh '''
                        export NVM_DIR="$HOME/.nvm"
                        . "$NVM_DIR/nvm.sh" > /dev/null 2>&1
                        nvm use ${NODE_VERSION} > /dev/null 2>&1
                        
                        echo "Running security scan..."
                        npm audit --silent || true
                        echo "✓ Security scan completed"
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            script {
                echo "Build failed - cleaning up workspace"
                sh '''
                    echo "Process list:"
                    ps aux | grep node || true
                    echo "Disk space:"
                    df -h
                '''
            }
        }
    }
} 