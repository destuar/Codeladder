# Task: Allow Taking Exams on Locked Levels

**Goal:** Modify the learning dashboard (`LevelSystem.tsx`) to allow users to click 'Take Exam' on any level, even if it appears locked (dimmed). Passing the exam should still trigger the existing cascading unlock logic.

**Previous Behavior:** The 'Take Exam' and 'See History' buttons were disabled and prevented clicks on levels that were visually dimmed due to the cascading unlock logic.

**New Behavior:** Users can click 'Take Exam' or 'See History' on any level card. The visual dimming still indicates the lock status based on previously passed exams, but interaction is no longer blocked.

**Specific Changes in `frontend/src/components/LevelSystem.tsx`:**

- Removed the `isDimmed && !isComplete` check within the `handleStartNextTest` function that previously prevented navigation to the exam.
- Removed the `isDimmed && !isComplete` check within the `handleTestHistory` function that previously prevented navigation to the history page.
- Removed the `(isDimmed && !isComplete)` condition from the `disabled` prop on the 'Take Exam' button component.
- Removed the `(isDimmed && !isComplete)` condition from the `disabled` prop on the 'See History' button component.
- Removed conditional CSS classes (`bg-gray-100`, `dark:bg-gray-800/40`, `text-muted-foreground`, `cursor-not-allowed`) from both buttons that visually indicated a disabled state when `isDimmed && !isComplete` was true.

# Task: Fix Assessment Timer Duration Display

**Goal:** Ensure the timer displays the correct duration based on the assessment's `estimatedTime` value from the backend, and functions consistently across assessment pages.

**Initial Problem:** Assessment timers consistently displayed a 60-minute duration regardless of the actual `estimatedTime` value set for quizzes and tests in the database. Additionally, the timer would reset when navigating between questions, and the exit confirmation dialog would flicker every second due to timer updates.

**Root Causes Identified:**

1. **Field Name Mismatch:** The frontend components were looking for a `timeLimit` field in the assessment data while the backend was providing it as `estimatedTime`.
2. **Component Re-rendering:** Timer updates every second caused the exit dialog component to re-render and briefly disappear/reappear.
3. **Timer State Management:** The timer state wasn't properly maintained when navigating between assessment pages.

**Specific Changes Implemented:**

**Frontend (`frontend/src/features/assesment/shared/AssessmentEntryPage.tsx`):**

1. **Fixed Field Name Reference:**
   * Changed all references from `assessment.timeLimit` to `assessment.estimatedTime` when setting the `duration` prop for the `AssessmentIntro` and `AssessmentOverview` components.
   * Updated the `initialRemainingTime` calculation to use `assessment.estimatedTime` instead of `assessment.timeLimit`.
   * Added optional chaining (`assessment?.estimatedTime`) to prevent type errors.

2. **Improved Component Performance:**
   * Applied memoization techniques using `useCallback` and `useMemo` to reduce unnecessary re-renders.
   * Memoized the task formatting function (`formatAssessmentTasksCallback`) and the resulting formatted tasks array.
   * Memoized callback handlers (`handleStartAssessment`, `handleProceedToOverview`, `handleExitAssessment`, `handleFinishAssessment`) with proper dependency arrays.

3. **Enhanced Dialog Stability:**
   * Added state for the exit dialog (`showExitDialog`) and lifted it to the parent component to prevent re-rendering issues.
   * Created separate functions for controlling dialog visibility (`handleToggleExitDialog`) and performing the actual exit logic (`performExitNavigation`).

**Frontend (`frontend/src/features/assesment/shared/components/AssessmentPage.tsx`):**

1. **Fixed Field Name Reference:**
   * Updated the `useAssessmentTimer` hook initialization to use `assessment?.estimatedTime` instead of `assessment?.timeLimit`.
   * Added proper state handling to ensure the timer continues from the same point when navigating between assessment views.

2. **Improved Navigation Logic:**
   * Modified the `handleExit` function to include `{ replace: true, state: { skipIntro: true } }` in the navigation call to ensure users return to the assessment overview rather than the intro when exiting from a question.

**Frontend (`frontend/src/features/assesment/shared/components/AssessmentOverview.tsx`):**

1. **Enhanced Component Stability:**
   * Wrapped the `AssessmentOverviewHeader` component in `React.memo` to prevent unnecessary re-renders.
   * Extracted the `AlertDialog` into a dedicated memoized component (`ExitConfirmationDialog`) for better isolation from re-renders.
   * Removed a redundant `useAssessmentTimer` hook call within `AssessmentOverview` that was causing duplicate timer instances.

**Frontend (`frontend/src/features/assesment/shared/hooks/useAssessmentTimer.ts`):**

1. **Added Timer Pausing Capability:**
   * Modified the `useAssessmentTimer` hook to accept a third parameter (`pauseTimer: boolean`) that stops the timer countdown when true.
   * Implemented conditional timer initialization that skips setting up the interval when `pauseTimer` is true.
   * Updated the effect's dependency array to include `pauseTimer` for proper re-execution when the pause state changes.

**Outcome:** The assessment timer now correctly displays the duration based on the database's `estimatedTime` value. The timer remains consistent when navigating between questions, and the exit confirmation dialog remains stable without flickering. This provides a smoother and more accurate user experience across both quiz and test assessments.

# Task: Fix Quiz/Test Results Summary Page Display

**Goal:** Ensure the summary page displayed after completing a quiz or test accurately shows the percentage score, the number of correct vs. total questions, and the time spent.

**Initial Problem:** The summary page consistently displayed "0%" score, "0 time spent", and an incorrect "X out of Y correct" count (e.g., "50 out of 1 correct" instead of "1 out of 2 correct" for a 50% score).

**Root Causes Identified:**

1.  **Incorrect Frontend Mapping:** The frontend components (`QuizResultsPage.tsx` and initially `TestResultsPage.tsx`) were not correctly extracting or calculating values from the API response.
2.  **Missing Backend Data:** The primary API endpoint (`GET /api/quizzes/attempts/:id`) did not originally return the *total* number of questions in the assessment, leading to incorrect denominator calculations on the frontend.
3.  **Inconsistent Backend Field Names:** The backend used `startedAt` while the `TestResultsPage` expected `startTime`, causing issues with time calculation.
4.  **Redundant Frontend Calculation:** `QuizResultsPage.tsx` was attempting to recalculate the percentage score when the backend already provided it.

**Specific Changes Implemented:**

**Backend (`backend/src/routes/quiz.ts`):**

1.  **Modified `GET /api/quizzes/attempts/:id/results` Endpoint:**
    *   Updated Prisma query to include `quiz: { include: { _count: { select: { questions: true } } } }`.
    *   Added `totalQuestions: attempt.quiz?._count?.questions ?? 0` to the returned `results` object.
2.  **Modified `GET /api/quizzes/attempts/:id` Endpoint:**
    *   Updated Prisma query to include `quiz: { include: { _count: { select: { questions: true } } } }`.
    *   Added `totalQuestions: attempt.quiz?._count?.questions ?? 0` to the returned JSON response (`responseWithCount`).
    *   Added pre-calculation of `elapsedTime` based on `completedAt` and `startedAt`.
    *   Added `startTime: attempt.startedAt` as an alias for consistency.
    *   Included `elapsedTime` and `startTime` in the returned JSON response.

**Frontend (`frontend/src/features/assesment/quiz/QuizResultsPage.tsx`):**

1.  **Updated `defaultQuizResult` Mapping:**
    *   Corrected `percentageScore` to use `response.score ?? 0` directly.
    *   Corrected `timeSpentInSeconds` mapping to check `response.timeSpent`, `response.timeTaken`, and added fallback `calculateTimeFromDates(response.startedAt, response.completedAt)`.
    *   Ensured `totalQuestions` correctly uses `response.totalQuestions` (now provided by the backend).
2.  **Added `calculateTimeFromDates` Helper Function:** Implemented this function to calculate duration from date strings.
3.  **Fixed Score Display Text:** Modified the display logic to use `result.questions?.filter(q => q.correct).length || 0` for the count of correct answers and `result.totalQuestions || 0` for the total number of questions.
4.  **Added Debug Logging:** Included `console.log` statements to show processed result values.

**Frontend (`frontend/src/features/assesment/test/TestResultsPage.tsx`):**

1.  **Updated `totalQuestions` Calculation:** Modified the variable assignment to prioritize `testResult?.totalQuestions` (now provided by the backend via the updated `/attempts/:id` endpoint) before falling back to `testResult?.responses?.length`.
2.  **Added Debug Logging:** Included `console.log` statements similar to the quiz page.

**Outcome:** Both quiz and test summary pages now accurately display the percentage score, the correct vs. total question count, and the time spent.

# Task: Fix Assessment Submitted Status Lost on Navigation

**Goal:** Ensure that when a user submits an answer for an individual question (MCQ or Code) within a quiz or test, navigates away from the assessment page, and then returns, the question correctly displays both its 'Submitted' status and the previously selected answer.

**Initial Problem:** After submitting a question, navigating away (e.g., back to the assessment overview) and then back into the question, the 'Submitted âœ“' button state persisted, but the visual indication of the selected answer (e.g., the filled radio button for MCQ) was lost.

**Root Cause:** A state synchronization issue in `AssessmentPage.tsx`. When the page reloaded upon navigation, the `submittedQuestions` state array (tracking which questions were submitted) was correctly reloaded from `sessionStorage`. However, the `answers` prop (containing the actual selected answers, passed down from `useQuiz` or `useTest`) was sometimes stale or empty during the initial render cycles after navigating back. This led to the question component (`MultipleChoiceQuestion` or `CodeQuestion`) rendering without the selection, even though the `AssessmentPage` knew the question was submitted.

**Specific Fixes:**

1.  **Refactored State Initialization in `AssessmentPage.tsx`:**
    *   Modified `useEffect` hooks to prioritize loading `submittedQuestions` state directly from `sessionStorage` on mount using a helper function (`loadInitialSubmittedQuestions`).
    *   Separated effects for different initialization phases (completion checks, attempt starting, `assessment_${id}` structure verification) to prevent race conditions.
    *   Ensured the `assessment_${id}` structure creation/verification relies on the correctly loaded state and doesn't incorrectly overwrite `isSubmitted` flags.

2.  **Synchronized `useTest.ts` with `useQuiz.ts`:**
    *   **Identified Discrepancy:** Found that `useTest.ts` had diverged from `useQuiz.ts` and was not correctly restoring the `answers` state object from `sessionStorage` upon re-initialization (like when navigating back).
    *   **Replaced Logic:** Copied the entire working logic from `useQuiz.ts` into `useTest.ts`, meticulously renaming all quiz-specific identifiers (variables, types, storage keys like `quiz_` -> `test_`) to their test equivalents.
    *   **Fixed Linter Error:** Corrected a minor linter error introduced during the copy by ensuring the `resetTestSession` helper function was defined before being used within its `useEffect` hook.

**Outcome:** Both quizzes and tests now correctly restore and display the selected answer *and* the submitted status when navigating back to a previously answered question.

# Task: Fix Test Question Update Failing (404 Error)

**Goal:** Allow administrators to successfully update questions within a Test via the Admin Dashboard.

**Initial Problem:** When attempting to save changes to a question belonging to a Test, the frontend sent a `PUT` request to `/api/quizzes/questions/:questionId`, resulting in a `404 Not Found` error from the backend.

**Root Cause:** The frontend code in `TestAdmin.tsx` was incorrectly calling the `api.updateQuizQuestion` function, which is hardcoded to use the API endpoint specifically designed for *quiz* questions. The backend couldn't find the *test* question at that quiz-specific URL.

**Specific Fixes:**

1.  **Added `updateTestQuestion` to `api.ts`:**
    *   Created a new function `updateTestQuestion` in the API client (`frontend/src/lib/api.ts`).
    *   This new function sends `PUT` requests to the correct endpoint for test questions (assumed `/api/tests/questions/:questionId`).
2.  **Updated `TestAdmin.tsx`:**
    *   Modified the `handleSaveTest` function within `frontend/src/features/admin/components/TestAdmin.tsx`.
    *   Changed the code to call the newly added `api.updateTestQuestion` function when updating an existing question, instead of the incorrect `api.updateQuizQuestion`.

**Outcome:** Updating existing questions within a Test from the Admin Dashboard now sends the request to the correct backend endpoint and succeeds.

# Task: Suppress Harmless Console Warning on Test Deletion

**Goal:** Prevent a benign console warning about JSON parsing when deleting a test from the Admin Dashboard.

**Initial Problem:** Successfully deleting a Test triggered a console warning: `SyntaxError: Unexpected end of JSON input`, even though the delete operation worked correctly.

**Root Cause:** The backend correctly responds to a successful `DELETE` request with an HTTP `204 No Content` status, which has an empty body. The generic `request` function in the frontend API client (`frontend/src/lib/api.ts`) was unconditionally attempting to parse *all* response bodies as JSON, leading to an error when trying to parse the intentionally empty body of the `204` response.

**Specific Fix:**

1.  **Modified `request` function in `api.ts`:**
    *   Added a check within the `request` function to specifically look for `response.status === 204`.
    *   If the status is `204`, the function now skips the `response.json()` call, preventing the parsing error on the empty body.

**Outcome:** Deleting tests no longer produces the harmless JSON parsing warning in the console.

# Task: Remove Action Buttons from Test Results Page

**Goal:** Remove the "Return to Level" and "Retake Test" buttons from the bottom of the test results page.

**Request:** User explicitly asked to remove these buttons.

**Specific Fix:**

1.  **Commented out JSX in `TestResultsPage.tsx`:**
    *   Located the `div` containing the "Return to Level" and "Retake Test" buttons near the end of `frontend/src/features/assesment/test/TestResultsPage.tsx`.
    *   Commented out this entire block of JSX code.

**Outcome:** The specified buttons are no longer displayed on the test results page.

# Task: Stabilize Assessment Timer and Session State

**Goal:** Ensure the quiz/test timer initializes correctly with the fetched `estimatedTime`, persists accurately across navigation between assessment pages (overview, MCQ, code), and that assessment state (answers, submitted status) is reliably loaded and cleared.

**Initial Problem:**
1.  **Incorrect Initial Timer:** On first load of an assessment page (especially after navigating from overview to a question), the timer often briefly showed the default 60 minutes or reset to the full `estimatedTime` instead of continuing the countdown from its previous state.
2.  **State Inconsistency:** Occasionally, previously submitted answers or the 'Submitted' status from a *prior* attempt on the *same* quiz/test would incorrectly persist into a new attempt.

**Root Causes Identified:**

1.  **Timer Initialization Race Condition:** The `useAssessmentTimer` hook was initializing based on the `initialDuration` prop *before* confirming if a valid time already existed in `sessionStorage` for the current attempt. This happened because the hook ran immediately on mount, potentially before the parent component (`AssessmentPage`) had finished loading the `assessment` data containing the correct `estimatedTime` or before `sessionStorage` could be reliably read and prioritized.
2.  **Conflicting State Management:** The `AssessmentPage` component contained logic within a `useEffect` hook that attempted to read and sometimes write the `remainingTime` field within the `assessment_{id}` session storage item. This conflicted with `useAssessmentTimer`, which should have been the sole owner of that field.
3.  **Incomplete/Inconsistent Session Cleanup:** The logic for clearing `sessionStorage` upon completion, explicit exit, or starting a new attempt after a prior completion was fragmented across different components and hooks (`AssessmentEntryPage`, `useQuiz`, `useTest`, `AssessmentOverviewHeader`), leading to scenarios where old state wasn't fully purged.

**Specific Changes Implemented:**

**Frontend (`frontend/src/lib/sessionUtils.ts`):**
1.  **Created Centralized Utilities:**
    *   `clearAssessmentSession(assessmentId, type)`: Thoroughly removes all known session keys related to a specific assessment ID and type.
    *   `markAssessmentCompleted(assessmentId, type)`: Sets a specific flag (`${type}_${assessmentId}_completed`) in session storage.
    *   `isAssessmentCompleted(assessmentId, type)`: Checks for the existence of the completion flag.

**Frontend (`frontend/src/features/assesment/shared/hooks/useAssessmentTimer.ts`):**
1.  **Stricter Initialization:**
    *   Modified the initialization `useEffect` to *always* prioritize `loadTimeFromStorage()`. If a stored time is found, it's used, and further initialization logic within that effect run is skipped.
    *   Initialization using `initialDuration` only occurs if *no* stored time exists *and* a valid (`> 0`) `initialDuration` is provided.
    *   Removed the fallback to a default 60 minutes if `initialDuration` wasn't ready; the hook now waits.
    *   Ensured the interval only starts if `remainingTime` has been successfully set (is not `undefined`).
    *   Improved logging for debugging initialization steps.

**Frontend (`frontend/src/features/assesment/shared/components/AssessmentPage.tsx`):**
1.  **Delayed Timer Initialization:**
    *   Added an `isReady` state variable, set to true only after the `assessment` data (containing `estimatedTime`) finishes loading (`isLoading` is false).
    *   The `useAssessmentTimer` hook is now passed `isReady ? id : undefined` for its `assessmentId` parameter, ensuring it only starts processing when the necessary data is available.
2.  **Removed Conflicting Logic:**
    *   Deleted all code within the `useEffect` hook responsible for initializing/verifying the `assessment_{id}` session structure that attempted to read or write the `remainingTime` field. This responsibility is now solely with `useAssessmentTimer`.
    *   Ensured the effect still correctly syncs task structures and submitted counts.

**Frontend (`frontend/src/features/assesment/shared/AssessmentEntryPage.tsx`):**
1.  **Integrated Session Utilities:**
    *   The initial `useEffect` now uses `isAssessmentCompleted` to check for prior completion and calls `clearAssessmentSession` if true *before* attempting to load any resumable state.
    *   The `performExitNavigation` function (called on confirmed exit) now uses `clearAssessmentSession`.
    *   The `handleFinishAssessment` function (called on confirmed submission) now correctly uses `markAssessmentCompleted` and `clearAssessmentSession` upon successful API submission.

**Frontend (`frontend/src/features/assesment/quiz/hooks/useQuiz.ts` & `frontend/src/features/assesment/test/hooks/useTest.ts`):**
1.  **Integrated Session Utilities:**
    *   Refactored initialization (`useEffect`), submission (`submitQuiz`/`submitTest`), attempt starting (`startQuizAttempt`/`startTestAttempt`), and reset logic (`clearSavedQuiz`/`clearSavedTest`, `forceReset`) to consistently use `isAssessmentCompleted`, `markAssessmentCompleted`, and `clearAssessmentSession`.
    *   Removed redundant manual session key removal logic.
    *   Fixed linter error in `useQuiz` by using the correct `api.submitQuizResponse` function.

**Frontend (`frontend/src/features/assesment/shared/components/AssessmentOverview.tsx`):**
1.  **Integrated Session Utilities:**
    *   Updated the `AssessmentOverviewHeader`'s `handleExitConfirm` function to use `clearAssessmentSession`.
    *   Corrected import path for `clearAssessmentSession`.
2.  **Improved Display:**
    *   Updated `formatRemainingTime` to handle `undefined` and `<= 0` cases gracefully.
    *   Added a 'Loading...' state for the duration display when `duration` prop is initially undefined.

**Frontend (`frontend/src/features/assesment/shared/components/AssessmentIntro.tsx`):**
1.  **Improved Display:**
    *   Updated `formatDuration` to handle `undefined`, `null`, and `<= 0` cases gracefully.

**Outcome:** The assessment timer now reliably initializes with the correct time fetched from the backend, persists its state correctly during navigation between overview and question pages, and avoids resetting inappropriately. Furthermore, the session state for quizzes and tests is managed more robustly, preventing issues with stale data from previous attempts interfering with new ones.

# Task: Prevent Quiz Title Flicker on Intro Page

**Goal:** Ensure the quiz introduction page displays the *Topic Name* (e.g., "Methodology") directly as the title, instead of briefly showing the *Quiz Name* (e.g., "Quiz #4") and then switching.

**Initial Problem:** The quiz intro page title would flicker. It initially displayed the quiz name fetched with the main assessment data, then updated to the topic name once the separate topic data fetch completed.

**Root Cause:** The `AssessmentEntryPage.tsx` component rendered the `AssessmentIntro.tsx` subcomponent using fallback data (`assessment.title`) while still waiting for the `useQuery` hook fetching the related `topic` data (which contained the correct `topic.name`) to resolve.

**Specific Changes Implemented:**

**Frontend (`frontend/src/features/assesment/shared/AssessmentEntryPage.tsx`):**

1.  **Added Loading State Check:**
    *   Inside the `if (showIntro)` block, added a condition `if (isQuiz && topicLoading)`. This checks if the assessment is a quiz and if the `useQuery` fetching the topic data is still in its loading state.
2.  **Implemented Skeleton Loader:**
    *   When the above condition is true (quiz intro, topic loading), the component now returns a `Skeleton` loading UI placeholder instead of rendering `AssessmentIntro` immediately.
3.  **Delayed Rendering & Updated Title Prop:**
    *   Ensured that `AssessmentIntro` is only rendered for quizzes *after* the `topicLoading` state is false.
    *   Modified the `title` prop passed to `AssessmentIntro` for quizzes to prioritize the now-loaded topic name: `title={isQuiz ? (topic?.name || 'Quiz Topic') : ...}`. The fallback to `assessment.title` for quizzes was removed, as the loading check guarantees `topic.name` is available (or a default is used).

**Outcome:** The quiz introduction page now displays a loading indicator if the topic data isn't immediately available, and then renders directly with the correct topic name as the title, eliminating the distracting flicker.
